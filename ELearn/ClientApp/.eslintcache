[{"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/index.tsx":"1","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/reportWebVitals.ts":"2","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/Router.tsx":"3","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/Navbar.tsx":"4","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/Footer.tsx":"5","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/CourseView.tsx":"6","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/sampleData.ts":"7","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseSlider.tsx":"8","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseCard.tsx":"9","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseCardCarousel.tsx":"10","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/utils.ts":"11","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/GrayBackground.tsx":"12","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/api.ts":"13","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/AppSnackBar.tsx":"14","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/FileUploader.ts":"15","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/HomeView.tsx":"16","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/AddLessonsView.tsx":"17","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/AddCourseView.tsx":"18","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/VideoUploaderElement.tsx":"19"},{"size":505,"mtime":1609421232853,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1609355678666,"results":"22","hashOfConfig":"21"},{"size":1459,"mtime":1609432349260,"results":"23","hashOfConfig":"21"},{"size":994,"mtime":1609430872520,"results":"24","hashOfConfig":"21"},{"size":952,"mtime":1609355678671,"results":"25","hashOfConfig":"21"},{"size":342,"mtime":1609355678674,"results":"26","hashOfConfig":"21"},{"size":1719,"mtime":1609355678675,"results":"27","hashOfConfig":"21"},{"size":2727,"mtime":1609355678671,"results":"28","hashOfConfig":"21"},{"size":1333,"mtime":1609355678672,"results":"29","hashOfConfig":"21"},{"size":2418,"mtime":1609355678672,"results":"30","hashOfConfig":"21"},{"size":704,"mtime":1609435811168,"results":"31","hashOfConfig":"21"},{"size":314,"mtime":1609360330674,"results":"32","hashOfConfig":"21"},{"size":2001,"mtime":1609442387609,"results":"33","hashOfConfig":"21"},{"size":1082,"mtime":1609431551293,"results":"34","hashOfConfig":"21"},{"size":828,"mtime":1609445130360,"results":"35","hashOfConfig":"21"},{"size":1988,"mtime":1609445200213,"results":"36","hashOfConfig":"21"},{"size":2633,"mtime":1609436612057,"results":"37","hashOfConfig":"21"},{"size":6764,"mtime":1609444988723,"results":"38","hashOfConfig":"21"},{"size":2441,"mtime":1609439357622,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"sogl8c",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/index.tsx",[],["89","90"],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/reportWebVitals.ts",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/Router.tsx",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/Navbar.tsx",["91","92"],"import React from 'react'\nimport {NotificationsNone as Bell, Search} from '@material-ui/icons';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Link } from 'react-router-dom';\n\nexport interface Props {\n    [key: string]: any\n}\n\nexport default (props: Props) => {\n\n    return (\n        <div className = \"navbar\">\n            <div className = \"nav_1\">\n                <Link to = \"/\">\n                    <h2>FakeShare</h2>\n                </Link>\n                <p>Browse</p>\n                <div className = \"input_box\">\n                    <Search className = \"search_icon\"/>\n                    <input className = \"navbar_input\" placeholder=\"Search for a course\"/>\n                </div>\n            </div>\n\n\n\n            \n            <div className = \"nav_2\">\n                <p>My Classes</p>\n                <Link to=\"/add-course\">\n                    <AddIcon className=\"notifications\"/>\n                </Link>\n            </div>\n\n            \n\n           \n        </div>\n    );\n}","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/Footer.tsx",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/CourseView.tsx",["93","94"],"import { AnyARecord } from 'dns';\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router-dom';\n\nexport interface Props {\n    match: {\n        params: {\n            id: string\n        }\n    }\n}\n\nconst CourseView = ({match}: Props) => {\n    return (\n        <h2>{match.params.id }</h2>\n    );\n}\n\n export default CourseView;","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/sampleData.ts",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseSlider.tsx",["95","96"],"import React, { useState, useEffect } from 'react'\nimport {IconButton} from \"@material-ui/core\";\nimport ArrowRight from '@material-ui/icons/ArrowForwardIos';\nimport ArrowLeft from '@material-ui/icons/ArrowBackIos';\nimport PlayArrow from '@material-ui/icons/PlayArrow';\nimport { cacheImages } from '../utils';\nimport { Link } from 'react-router-dom';\nimport { CourseSliderElement } from '../interfaces';\n\nexport interface Props {\n    data: CourseSliderElement[];\n}\nconst CourseSlider = ({data}: Props) => {\n    const [selected, setSelected] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    const next = () => {\n        if (selected + 1 !== data.length){\n            setSelected(selected + 1);\n        }\n        else{\n            setSelected(0);\n        }\n    }\n\n    const previous = () => {\n        if (selected !== 0){\n            setSelected(selected - 1);\n        }\n        else{\n            setSelected(data.length - 1);\n        }\n    }\n\n    useEffect(() => {\n        const urls = data.map(x => x.link);\n        cacheImages(urls);\n    }, [])\n\n    if (loading) {\n        return null;\n    }\n\n    return (\n        <div className=\"course-slider\">\n            {data.map((x, index) => (\n                <div key = {x.link + index} className = {`banner ${index === selected ? \"active\": \"inactive\"}`} style = {{backgroundImage: `url(${x.link})`}}/>\n            ))}\n            {data.map((x, index) => (\n                <div key = {x.title + x.description} className={`content ${index === selected ? \"active\": \"inactive\"}`}>\n                    <p className=\"title\">\n                        {x.title}\n                    </p>\n                    <div className=\"p description\">\n                        {x.description}\n                    </div>\n                    <Link to = {`course/${x.id}`}>\n                        <button>\n                            <PlayArrow className = \"icon\"/>\n                            Watch Now\n                        </button>\n                    </Link>\n                </div> \n            ))}\n            <div className=\"gradient\"/>\n            <div className=\"slider\">\n                <IconButton onClick = {previous} className = \"arrow-left arrow\">\n                    <ArrowLeft style = {{marginLeft: \"5px\", width: \"21px\"}}/>\n                </IconButton>\n                {data.map((x, index) => (\n                    <div key = {index} className={`circle ${index === selected ? \"active\" : \"inactive\"}`}/>\n                ))}\n                <IconButton onClick = {next} className = \"arrow-right arrow\">\n                    <ArrowRight style = {{fontSize: \"1.42rem\"}}/>\n                </IconButton>\n            </div>\n        </div>\n    );\n}\n\nexport default CourseSlider;","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseCard.tsx",["97","98"],"import React, {useState} from 'react'\nimport {Link} from \"react-router-dom\"\nimport {Paper} from \"@material-ui/core\"\nimport {BookmarkBorder as BookmarkEmpty, Bookmark as BookmarkFilled} from '@material-ui/icons';\nimport { CourseCardData } from '../interfaces';\n\nexport default ({imageUrl, id, duration, title, author, students}: CourseCardData) => {\n    const [bookmarked, setBookmarked] = useState(false);\n\n    const handleClick = () => {\n        setBookmarked(!bookmarked);\n    }\n\n    return (\n        <Link to = {`/course/${id}`} className = \"course-card\">\n            <img src = {imageUrl} className = \"course-image\" alt = \"Not found\"/>\n            <div className = \"course-content\">\n                <div className = \"separe separe_1\">\n                    <p>\n                        {students} students\n                    </p>\n                    <p>\n                        {duration}\n                    </p>\n                </div>\n                <p className = \"course-title\">{title}</p>\n                <div className = \"separe separe_2\">\n                    <p>{author}</p>\n                    {bookmarked ? <BookmarkFilled className = \"bookmark bookmark_active\" onClick = {handleClick}/> : <BookmarkEmpty className = \"bookmark\" onClick = {handleClick}/>}\n                </div>\n            </div>\n        </Link>\n    );\n}","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseCardCarousel.tsx",["99","100","101","102","103"],"import React, { useEffect, useRef, useState } from 'react'\nimport {IconButton} from \"@material-ui/core\";\nimport ArrowRight from '@material-ui/icons/ArrowForwardIos';\nimport ArrowLeft from '@material-ui/icons/ArrowBackIos';\nimport {breakpoints} from \"../utils\";\nimport { cpuUsage } from 'process';\n\nexport interface Props {\n    [key: string]: any\n}\n\n\nconst CourseCardCarousel = ({children}: Props) => {\n    const mainContainer = useRef <any> ();\n    const slide = useRef <any> ();\n    const [counter, setCounter] = useState(0);\n    const [view, setView] = useState(4);\n\n\n    const handleResize = () => {\n        const w = window.innerWidth;\n        const {mobile, tablet, smallScreen, largeScreen} = breakpoints;\n        let view = 0;\n        if (w <= mobile) {\n            view = 1;\n        }\n        else if (w <= tablet) {\n            view = 2;\n        }\n        else if (w <= smallScreen) {\n            view = 3;\n        }\n        else {\n            view = 4;\n        }\n        setView(view);\n    }\n    \n    useEffect(() => {\n        handleResize();\n        window.addEventListener(\"resize\", handleResize);\n    }, [])\n\n    const left = () => {\n        if (counter === 0)\n            return;\n        setCounter(counter - 1);\n    }\n\n    const right = () => {\n        if (counter == children.length - 1)\n            return;\n        setCounter(counter + 1);\n    }\n\n    let data = children;\n    if (view == 1){\n        data = data.slice(0, 4);\n    }\n    else if (data.length % view !== 0){\n        data = data.slice(0, Math.floor(data.length / view) * view)\n    }\n\n\n    return (\n        <section ref = {mainContainer} className = \"card-carousel\">\n            <IconButton disabled = {counter === 0} onClick = {left} className = \"arrow arrow-left\">\n                <ArrowLeft/>\n            </IconButton>\n            <div className=\"window\">\n                <div className=\"content\" style = {{transform: `translateX(${-counter * 100}%)`}}>\n                    {data.map((x, index) => (\n                        <div key = {index} className=\"item\">\n                            {x}\n                        </div>\n                    ))}\n                </div>\n            </div>\n            <IconButton disabled = {(counter + 1) * view >= data.length - 1} onClick = {right} className = \"arrow arrow-right\">\n                <ArrowRight/>\n            </IconButton>\n        </section>\n    );\n}\n\nexport default CourseCardCarousel;","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/utils.ts",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/GrayBackground.tsx",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/api.ts",["104","105","106"],"import {AddCourseModel, Category, CourseModel, LessonModel} from \"./interfaces\";\nimport {useEffect} from \"react\";\n\ntype Method = \"GET\" | \"POST\" | \"DELETE\" | \"PUT\";\n\nconst getCategories = async () :Promise<Category[]> => {\n    const url = \"/api/categories/all\";\n    return (await makeNetworkCall(url, [], \"GET\", null)) as Category[];\n}\n\nconst postCourse = async (data: AddCourseModel) : Promise<CourseModel> => {\n    const url = \"/api/createcourse\"\n    \n    return (await makeNetworkCall(url, [], \"POST\", data) ) as CourseModel;\n}\n\nconst assignCategory = async (courseId: string, categoryId: string): Promise<object> => {\n    const url = \"/api/createcourse/category\"\n    return (await makeNetworkCall(url, [], \"POST\", {\n        courseId: courseId,\n        categoryId: categoryId\n    })) \n}\n\nconst addLesson = async (courseId: string, title: string, videoSrc: string): Promise<object> => {\n    const url = \"api/createcourse/lesson\"\n    return (await makeNetworkCall(url, [], \"POST\", {\n        courseId: courseId,\n        title: title,\n        videoSrc: videoSrc\n    }))\n}\n\nconst getLessons = async (courseId: string): Promise<LessonModel[]> => {\n    const url = \"api/coursedetails/lessons\"\n    return (await makeNetworkCall(url, [[\"id\", courseId]], \"GET\", null)) as LessonModel[];\n}\n\nconst makeNetworkCall = async (url: string, params: [string, string][] = [], method: Method = \"GET\", data: any | null = null): Promise<object> => {\n    const link = `${url}?${params.map(it => it[0] + '=' + it[1]).join(\",\")}`\n    const options = {\n        method: method,\n        headers: { 'Content-Type': 'application/json' },\n        body: data === null ? undefined : JSON.stringify(data)\n    }\n    const response = await fetch(link, options);\n    const raw = await response.text();\n    if (response.status >= 400) {\n        const json = JSON.parse(raw);\n        throw new Error(json.title)\n    }\n    if (raw === \"\") return {};\n    else return JSON.parse(raw);\n}\n\n\n\nexport {getCategories, postCourse, assignCategory};","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/AppSnackBar.tsx",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/FileUploader.ts",["107"],"import AWS from \"aws-sdk\";\n\nAWS.config.update({\n    accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY,\n    secretAccessKey: process.env.REACT_APP_AWS_SECRET_KEY\n})\n\nconst bucketName = \"cybergh\";\n\nconst bucket = new AWS.S3({\n    params: {Bucket: bucketName},\n    region: \"us-east-1\"\n})\n\nconst uploadFile = async (file, progressCallback) => {\n    const params = {\n        ACL: 'public-read',\n        Key: file.name,\n        ContentType: file.type,\n        Body: file,\n        Bucket: bucketName\n    }\n    let ans = await bucket.putObject(params)\n        .on('httpUploadProgress', (evt) => {\n            // console.log(evt.loaded / evt.total)\n            progressCallback(evt.loaded / evt.total * 100)\n        })\n        .promise()\n\n    return `https://${bucketName}.s3.amazonaws.com/${file.name}`;\n\n}\n\nexport {bucket, uploadFile};","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/HomeView.tsx",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/AddLessonsView.tsx",["108","109","110","111","112"],"import React, {useRef, useState} from 'react'\nimport GrayBackground from \"../components/GrayBackground\";\nimport {CircularProgress, LinearProgress} from \"@material-ui/core\";\nimport VideoUploaderElement from \"../components/VideoUploaderElement\";\nimport {uploadFile} from \"../components/FileUploader\";\nimport {cacheImages, generateRandomString} from \"../utils\";\n\nexport interface Props {\n    [key: string]: any\n}\n\n// const file = input.files[0];\n// let blob = file.slice(0, file.size, 'image/*');\n// let extension = file.name.split(\".\").slice(-1)[0];\n// let randomString = generateRandomString();\n// let renamedFile = new File([blob], `${randomString}.${extension}`, {type: 'video/' + extension});\n\nconst AddLessonsView = (props: Props) => {\n    const inputRef = useRef <HTMLInputElement | null>  (null);\n    const [videos, setVideos] = useState <any[]> ([]);\n    \n    const handleUpload = () => {\n        inputRef.current?.click();\n    }\n    \n    const handleChange = () => {\n        let input = inputRef.current as HTMLInputElement;\n        if (input.files?.length && input.files?.length > 0){\n            let file = input.files[0];\n            setVideos([...videos, file]);\n        }\n    }\n    \n    return (\n        <>\n            <GrayBackground/>\n            <section className=\"add-lessons\">\n                <p className=\"title\">Video Lessons</p>\n                <p className=\"description\">\n                    Skillshare classes average 20-60 minutes total running time, divided into short video lessons of 2-5 minutes each.\n                    To publish your class, the combined length of all your videos must total at least 10 minutes. <br/> <br/>\n                    Teachers may upload a maximum of 1 class per week.\n                </p>\n                <hr/>\n                <div className = \"uploader\">\n                    <div className = \"videos\">\n                        {videos.length === 0 ?\n                            <p className=\"empty\">\n                                There are no videos here, yet.\n                            </p>\n                            :\n                            videos.map(x => <VideoUploaderElement key = {x} rawVideo={x}/>)\n                        }\n                    </div>\n                    <hr/>\n                    <div>\n                        <button type=\"button\" className=\"upload\" onClick={handleUpload}>Upload Video</button>\n                    </div>\n                </div>\n                <input multiple={false} onChange={handleChange} type = \"file\" ref = {inputRef}  accept = \"video/*\"/>\n            </section>\n        </>\n    );\n}\n\nexport default AddLessonsView;","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/AddCourseView.tsx",["113","114","115","116","117","118","119"],"import React, {useContext, useEffect, useRef, useState} from 'react'\nimport GrayBackground from \"../components/GrayBackground\";\nimport S3FileUpload from \"react-s3\";\nimport {AddCourseModel, Category} from \"../interfaces\";\nimport {assignCategory, getCategories, postCourse} from \"../api\";\nimport {CircularProgress, LinearProgress, Snackbar} from '@material-ui/core';\nimport {Alert} from \"@material-ui/lab\";\nimport {cacheImages, generateRandomString} from \"../utils\";\nimport {SnackbarContext} from \"../components/AppSnackBar\";\nimport {bucket, uploadFile} from \"../components/FileUploader\";\nimport {stringify} from \"querystring\";\n\n\nexport interface Props {\n    [key: string]: any\n}\n\nconst userLevels = [\"Beginner\", \"Intermediate\", \"Expert\"];\n\nconst defaultFields = {\n    title: \"\",\n    previewImageUrl: \"\",\n    description: \"\",\n    length: 120,\n    category: \"\",\n    userLevel: userLevels[0]\n}\n\nconst AddCourse =  (props: Props) => {\n    const {setData: setSnackbar} = useContext(SnackbarContext);\n    \n    const [loading, setLoading] = useState(false);\n    const [loadingProgress, setLoadingProgress] = useState(0);\n    const [formLoading, setFormLoading] = useState(false);\n    const [fields, setFields] = useState(defaultFields);\n    const [categories, setCategories] = useState<Category[]>([]);\n    let inputRef = useRef<HTMLInputElement | null>(null);\n    \n    const setField = (field: string) => (e) => {\n        const newFields = {\n            ...fields,\n            [field]: e.target.value\n        }\n        setFields(newFields);\n        console.log(newFields);\n    }\n    \n    const withFallback = async (action) => {\n        try {\n            await action()\n        } catch (e) {\n            // console.log(e);\n            console.log(e.message);\n            setSnackbar({\n                message: e.message,\n                type: \"error\"\n            })\n        }\n    }\n    \n    const addCourse = async (e) => {\n        e.preventDefault();\n        setFormLoading(true);\n        const model: AddCourseModel = {\n            ...fields\n        }\n        await withFallback(async () => {\n            const course = await postCourse(model);\n            const categoryId = fields.category;\n            await assignCategory(course.id, categoryId);\n        })\n        \n        setFormLoading(false);\n    }\n    \n    const getData = async () => {\n        let categories = await getCategories();\n        setCategories(categories);\n        setFields({\n            ...fields,\n            category: categories[0].id\n        })\n        console.log(categories);\n    }\n    \n    useEffect(() => {\n        getData();\n    }, []);\n    \n    const handleClick = () => {\n        inputRef.current?.click();\n    }\n    \n    const handleUpload = async () => {\n        let input = inputRef.current as HTMLInputElement;\n        if (input.files?.length && input.files?.length > 0){\n            setLoading(true);\n            const file = input.files[0];\n            let blob = file.slice(0, file.size, 'image/*');\n            let extension = file.name.split(\".\").slice(-1)[0];\n            let randomString = generateRandomString();\n            let renamedFile = new File([blob], `${randomString}.${extension}`, {type: 'image/' + extension});\n            // let response = await S3FileUpload.uploadFile(renamedFile, config);\n            let location = await uploadFile(renamedFile, (progress) => {\n                setLoadingProgress(progress);\n            })\n            await cacheImages([location]);\n            setLoading(false);\n            setFields({\n                ...fields,\n                previewImageUrl: location\n            })\n        }\n    }\n    \n    return (\n            <>\n                <GrayBackground/>\n                <section className=\"course-overview\">\n                    <p className=\"title\">Course Overview</p>\n                    <p className=\"description\">Add class details to help students discover and learn about your class.</p>\n                    <hr/>\n    \n                    <form className=\"form\" onSubmit={addCourse}>\n                        <div className=\"element\">\n                            <p className=\"label\">Course Title</p>\n                            <input value={fields.title} required type=\"text\" placeholder=\"Write a course title\" onChange={setField(\"title\")}/>\n                        </div>\n    \n                        <div className=\"element\">\n                            <p className=\"label\">Description</p>\n                            <textarea value={fields.description} required rows={6} placeholder=\"Write a course description\" onChange={setField(\"description\")}/>\n                        </div>\n                        \n                        <div className=\"image-uploader\">\n                            {loading && <LinearProgress className=\"loader\" variant=\"determinate\" value={loadingProgress} />}\n                            {fields.previewImageUrl !== null && <img src={fields.previewImageUrl! }/>}\n                            <input onChange={handleUpload} ref = {inputRef} type = \"file\" accept = \"image/*\" multiple = {false}/>\n                            {!loading && <button type=\"button\" onClick={handleClick} className={fields.previewImageUrl ? \"absolute\" : \"\"}>Upload Image</button>}\n                        </div>\n                        \n                        <div className=\"row\">\n                            <div className=\"element first\">\n                                <p className=\"label\">Category</p>\n                                <select value={fields.category} onChange={setField(\"category\")}>\n                                    {categories.map((it) => (\n                                        <option key={it.id} value={it.id}>{it.name}</option>\n                                    ))}\n                                </select>\n\n                            </div>\n\n                            <div className=\"element\">\n                                <p className=\"label\">User Level</p>\n                                <select value={fields.userLevel} onChange={setField(\"userLevel\")}>\n                                    {userLevels.map((it) => (\n                                        <option key={it} value={it}>{it}</option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                        {formLoading ? \n                            <div className=\"circular-progress\">\n                                <CircularProgress/>\n                            </div> : \n                            <input type=\"submit\" className=\"create\" value=\"Create\"/>\n                        }\n                    </form>\n                </section>\n            </>\n        \n    );\n}\n\nexport default AddCourse;","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/VideoUploaderElement.tsx",["120","121"],"import React, {useContext, useEffect, useState} from 'react'\nimport {generateRandomString} from \"../utils\";\nimport {uploadFile} from \"./FileUploader\";\nimport {LinearProgress} from \"@material-ui/core\";\nimport {SnackbarContext} from \"./AppSnackBar\";\n\nexport interface Props {\n    rawVideo: File\n}\n\nconst VideoUploaderElement = ({rawVideo}: Props) => {\n    const {setData: setSnackbar} = useContext(SnackbarContext);\n    const [loading, setLoading] = useState(false);\n    const [loadingProgress, setLoadingProgress] = useState(0);\n    const [location, setLocation] = useState(\"\");\n    \n    const uploadVideo = async () => {\n        setLoading(true);\n        const name = generateRandomString();\n        let blob = rawVideo.slice(0, rawVideo.size, 'video/*');\n        let extension = rawVideo.name.split(\".\").slice(-1)[0];\n        let randomString = generateRandomString();\n        let renamedFile = new File([blob], `${randomString}.${extension}`, {type: 'video/' + extension});\n        let location = await uploadFile(renamedFile, (progress) => {\n            setLoadingProgress(progress);\n        })\n        setLocation(location);\n        setSnackbar({message: \"Video uploaded successfully!\", type: \"success\"});\n        setLoading(false);\n    }\n    \n    useEffect(() => {\n        uploadVideo();    \n    }, [])\n    \n    return (\n        <section className = \"video-element\">\n            {loading ?\n                <div className=\"video\">\n                    <p className=\"percentage\">\n                        {loadingProgress.toFixed(1)}%\n                    </p>\n                    <p className=\"status\">\n                        {loading && \"Uploading ...\"}\n                    </p>\n                    <LinearProgress variant=\"determinate\" className=\"progress\" value={loadingProgress}/>\n                </div> :\n                <div className=\"preview\">\n                    <video src = {location} />\n                </div>\n            }\n            <div className = \"info\">\n                <p className= \"title\">\n                    {rawVideo.name.split(\".\")[0]}\n                </p>\n                {loading ?\n                    <p className=\"subtitle\">\n                        Uploading: {rawVideo.name}\n                    </p> :\n                    <button className=\"remove\" onClick={() => console.log(\"nob\")}>Remove Video</button>\n                }\n            </div>\n        </section>\n    );\n}\n\nexport default VideoUploaderElement;",{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":2,"column":30,"nodeType":"128","messageId":"129","endLine":2,"endColumn":34},{"ruleId":"130","severity":1,"message":"131","line":10,"column":1,"nodeType":"132","endLine":40,"endColumn":2},{"ruleId":"126","severity":1,"message":"133","line":1,"column":10,"nodeType":"128","messageId":"129","endLine":1,"endColumn":20},{"ruleId":"126","severity":1,"message":"134","line":3,"column":10,"nodeType":"128","messageId":"129","endLine":3,"endColumn":29},{"ruleId":"126","severity":1,"message":"135","line":15,"column":21,"nodeType":"128","messageId":"129","endLine":15,"endColumn":31},{"ruleId":"136","severity":1,"message":"137","line":38,"column":8,"nodeType":"138","endLine":38,"endColumn":10,"suggestions":"139"},{"ruleId":"126","severity":1,"message":"140","line":3,"column":9,"nodeType":"128","messageId":"129","endLine":3,"endColumn":14},{"ruleId":"130","severity":1,"message":"131","line":7,"column":1,"nodeType":"132","endLine":34,"endColumn":2},{"ruleId":"126","severity":1,"message":"141","line":6,"column":10,"nodeType":"128","messageId":"129","endLine":6,"endColumn":18},{"ruleId":"126","severity":1,"message":"142","line":15,"column":11,"nodeType":"128","messageId":"129","endLine":15,"endColumn":16},{"ruleId":"126","severity":1,"message":"143","line":22,"column":45,"nodeType":"128","messageId":"129","endLine":22,"endColumn":56},{"ruleId":"144","severity":1,"message":"145","line":51,"column":21,"nodeType":"146","messageId":"147","endLine":51,"endColumn":23},{"ruleId":"144","severity":1,"message":"145","line":57,"column":14,"nodeType":"146","messageId":"147","endLine":57,"endColumn":16},{"ruleId":"126","severity":1,"message":"148","line":2,"column":9,"nodeType":"128","messageId":"129","endLine":2,"endColumn":18},{"ruleId":"126","severity":1,"message":"149","line":25,"column":7,"nodeType":"128","messageId":"129","endLine":25,"endColumn":16},{"ruleId":"126","severity":1,"message":"150","line":34,"column":7,"nodeType":"128","messageId":"129","endLine":34,"endColumn":17},{"ruleId":"126","severity":1,"message":"151","line":23,"column":9,"nodeType":"128","messageId":"129","endLine":23,"endColumn":12},{"ruleId":"126","severity":1,"message":"152","line":3,"column":9,"nodeType":"128","messageId":"129","endLine":3,"endColumn":25},{"ruleId":"126","severity":1,"message":"153","line":3,"column":27,"nodeType":"128","messageId":"129","endLine":3,"endColumn":41},{"ruleId":"126","severity":1,"message":"154","line":5,"column":9,"nodeType":"128","messageId":"129","endLine":5,"endColumn":19},{"ruleId":"126","severity":1,"message":"155","line":6,"column":9,"nodeType":"128","messageId":"129","endLine":6,"endColumn":20},{"ruleId":"126","severity":1,"message":"156","line":6,"column":22,"nodeType":"128","messageId":"129","endLine":6,"endColumn":42},{"ruleId":"126","severity":1,"message":"157","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":20},{"ruleId":"126","severity":1,"message":"158","line":6,"column":43,"nodeType":"128","messageId":"129","endLine":6,"endColumn":51},{"ruleId":"126","severity":1,"message":"159","line":7,"column":9,"nodeType":"128","messageId":"129","endLine":7,"endColumn":14},{"ruleId":"126","severity":1,"message":"160","line":10,"column":9,"nodeType":"128","messageId":"129","endLine":10,"endColumn":15},{"ruleId":"126","severity":1,"message":"161","line":11,"column":9,"nodeType":"128","messageId":"129","endLine":11,"endColumn":18},{"ruleId":"136","severity":1,"message":"162","line":88,"column":8,"nodeType":"138","endLine":88,"endColumn":10,"suggestions":"163"},{"ruleId":"164","severity":1,"message":"165","line":137,"column":65,"nodeType":"166","endLine":137,"endColumn":102},{"ruleId":"126","severity":1,"message":"167","line":19,"column":15,"nodeType":"128","messageId":"129","endLine":19,"endColumn":19},{"ruleId":"136","severity":1,"message":"168","line":34,"column":8,"nodeType":"138","endLine":34,"endColumn":10,"suggestions":"169"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"@typescript-eslint/no-unused-vars","'Bell' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'AnyARecord' is defined but never used.","'RouteComponentProps' is defined but never used.","'setLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["172"],"'Paper' is defined but never used.","'cpuUsage' is defined but never used.","'slide' is assigned a value but never used.","'largeScreen' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'addLesson' is assigned a value but never used.","'getLessons' is assigned a value but never used.","'ans' is assigned a value but never used.","'CircularProgress' is defined but never used.","'LinearProgress' is defined but never used.","'uploadFile' is defined but never used.","'cacheImages' is defined but never used.","'generateRandomString' is defined but never used.","'S3FileUpload' is defined but never used.","'Snackbar' is defined but never used.","'Alert' is defined but never used.","'bucket' is defined but never used.","'stringify' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["173"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'name' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'uploadVideo'. Either include it or remove the dependency array.",["174"],"no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [data]",{"range":"181","text":"182"},"Update the dependencies array to be: [getData]",{"range":"183","text":"184"},"Update the dependencies array to be: [uploadVideo]",{"range":"185","text":"186"},[1063,1065],"[data]",[2609,2611],"[getData]",[1304,1306],"[uploadVideo]"]