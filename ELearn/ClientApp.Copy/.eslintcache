[{"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/index.tsx":"1","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/reportWebVitals.ts":"2","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/Router.tsx":"3","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/Navbar.tsx":"4","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/Footer.tsx":"5","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/CourseView.tsx":"6","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/sampleData.ts":"7","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseSlider.tsx":"8","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseCard.tsx":"9","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseCardCarousel.tsx":"10","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/utils.ts":"11","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/GrayBackground.tsx":"12","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/api.ts":"13","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/AppSnackBar.tsx":"14","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/FileUploader.ts":"15","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/HomeView.tsx":"16","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/AddLessonsView.tsx":"17","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/AddCourseView.tsx":"18","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/VideoUploaderElement.tsx":"19","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CategoryCheckBox.tsx":"20","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/UserCoursesView.tsx":"21"},{"size":505,"mtime":1609421232853,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1609355678666,"results":"24","hashOfConfig":"23"},{"size":1584,"mtime":1609617356886,"results":"25","hashOfConfig":"23"},{"size":1064,"mtime":1609617356890,"results":"26","hashOfConfig":"23"},{"size":952,"mtime":1609355678671,"results":"27","hashOfConfig":"23"},{"size":342,"mtime":1609355678674,"results":"28","hashOfConfig":"23"},{"size":1719,"mtime":1609355678675,"results":"29","hashOfConfig":"23"},{"size":3275,"mtime":1609455087876,"results":"30","hashOfConfig":"23"},{"size":1572,"mtime":1609618627941,"results":"31","hashOfConfig":"23"},{"size":2890,"mtime":1609618411414,"results":"32","hashOfConfig":"23"},{"size":955,"mtime":1609615928627,"results":"33","hashOfConfig":"23"},{"size":314,"mtime":1609360330674,"results":"34","hashOfConfig":"23"},{"size":2953,"mtime":1609617441514,"results":"35","hashOfConfig":"23"},{"size":1081,"mtime":1609615622398,"results":"36","hashOfConfig":"23"},{"size":828,"mtime":1609445130360,"results":"37","hashOfConfig":"23"},{"size":1129,"mtime":1609610981411,"results":"38","hashOfConfig":"23"},{"size":2813,"mtime":1609450775678,"results":"39","hashOfConfig":"23"},{"size":7857,"mtime":1609615928619,"results":"40","hashOfConfig":"23"},{"size":4591,"mtime":1609616296681,"results":"41","hashOfConfig":"23"},{"size":401,"mtime":1609515300500,"results":"42","hashOfConfig":"23"},{"size":1028,"mtime":1609618589583,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"sogl8c",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"46"},"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/index.tsx",[],["100","101"],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/reportWebVitals.ts",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/Router.tsx",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/Navbar.tsx",["102","103"],"import React from 'react'\nimport {NotificationsNone as Bell, Search} from '@material-ui/icons';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Link } from 'react-router-dom';\n\nexport interface Props {\n    [key: string]: any\n}\n\nexport default (props: Props) => {\n\n    return (\n        <div className = \"navbar\">\n            <div className = \"nav_1\">\n                <Link to = \"/\">\n                    <h2>FakeShare</h2>\n                </Link>\n                <p>Browse</p>\n                <div className = \"input_box\">\n                    <Search className = \"search_icon\"/>\n                    <input className = \"navbar_input\" placeholder=\"Search for a course\"/>\n                </div>\n            </div>\n\n\n\n            \n            <div className = \"nav_2\">\n                <p>My Classes</p>\n                <Link to=\"/add-course\">\n                    <AddIcon className=\"notifications\"/>\n                </Link>\n            </div>\n\n            \n\n           \n        </div>\n    );\n}","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/Footer.tsx",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/CourseView.tsx",["104","105"],"import { AnyARecord } from 'dns';\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router-dom';\n\nexport interface Props {\n    match: {\n        params: {\n            id: string\n        }\n    }\n}\n\nconst CourseView = ({match}: Props) => {\n    return (\n        <h2>{match.params.id }</h2>\n    );\n}\n\n export default CourseView;","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/sampleData.ts",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseSlider.tsx",["106"],"import React, { useState, useEffect } from 'react'\nimport {IconButton} from \"@material-ui/core\";\nimport ArrowRight from '@material-ui/icons/ArrowForwardIos';\nimport ArrowLeft from '@material-ui/icons/ArrowBackIos';\nimport PlayArrow from '@material-ui/icons/PlayArrow';\nimport { cacheImages } from '../utils';\nimport { Link } from 'react-router-dom';\nimport { CourseSliderElement } from '../interfaces';\nimport {getCoursesByCategory} from \"../api\";\nimport {CourseModel} from \"../interfaces\";\n\nexport interface Props {\n   [key: string]: any;\n}\nconst CourseSlider = (props: Props) => {\n    const [selected, setSelected] = useState(0);\n    const [data, setData] = useState <CourseModel[] | null> (null);\n    console.log(data);\n    \n    const getData = async () => {\n        let courses = await getCoursesByCategory(\"recommended\");\n        const urls = courses.map(x => x.previewImageUrl);\n        await cacheImages(urls);\n        setData(courses);\n    }\n\n    const next = () => {\n        if (selected + 1 !== data!.length){\n            setSelected(selected + 1);\n        }\n        else{\n            setSelected(0);\n        }\n    }\n\n    const previous = () => {\n        if (selected !== 0){\n            setSelected(selected - 1);\n        }\n        else{\n            setSelected(data!.length - 1);\n        }\n    }\n\n    useEffect(() => {\n        getData();\n    }, [])\n    \n    useEffect(() => {\n        if (data) {\n            let timeout = setTimeout(next, 6000);\n            return () => clearTimeout(timeout);\n        }\n    })\n\n    if (!data) {\n        return (\n            <div className= \"placeholder\">\n            </div>\n        )\n    }\n    \n    return (\n        <div className=\"course-slider\">\n            {data.map((x, index) => (\n                <div key = {x.previewImageUrl + index} className = {`banner ${index === selected ? \"active\": \"inactive\"}`} style = {{backgroundImage: `url(${x.previewImageUrl})`}}/>\n            ))}\n            {data.map((x, index) => (\n                <div key = {x.title + x.description} className={`content ${index === selected ? \"active\": \"inactive\"}`}>\n                    <p className=\"title\">\n                        {x.title}\n                    </p>\n                    <div className=\"p description\">\n                        {x.description}\n                    </div>\n                    <Link to = {`course/${x.id}`}>\n                        <button>\n                            <PlayArrow className = \"icon\"/>\n                            Watch Now\n                        </button>\n                    </Link>\n                </div> \n            ))}\n            <div className=\"gradient\"/>\n            <div className=\"slider\">\n                <IconButton onClick = {previous} className = \"arrow-left arrow\">\n                    <ArrowLeft style = {{marginLeft: \"5px\", width: \"21px\"}}/>\n                </IconButton>\n                {data.map((x, index) => (\n                    <div key = {index} className={`circle ${index === selected ? \"active\" : \"inactive\"}`}/>\n                ))}\n                <IconButton onClick = {next} className = \"arrow-right arrow\">\n                    <ArrowRight style = {{fontSize: \"1.42rem\"}}/>\n                </IconButton>\n            </div>\n        </div>\n    );\n}\n\nexport default CourseSlider;","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseCard.tsx",["107","108"],"import React, {useState} from 'react'\nimport {Link} from \"react-router-dom\"\nimport {Paper} from \"@material-ui/core\"\nimport {BookmarkBorder as BookmarkEmpty, Bookmark as BookmarkFilled, Edit} from '@material-ui/icons';\nimport {CourseModel} from '../interfaces';\n\nexport interface Props extends CourseModel {\n    edit: boolean\n}\n\nexport default ({previewImageUrl, id, length, title, edit}: Props) => {\n    const [bookmarked, setBookmarked] = useState(false);\n\n    const handleClick = () => {\n        setBookmarked(!bookmarked);\n    }\n    \n    const link = edit ? `/add-lessons/${id}` : `/course/${id}`;\n\n    return (\n        <Link to = {link} className = \"course-card\">\n            <img src = {previewImageUrl} className = \"course-image\" alt = \"Not found\"/>\n            <div className = \"course-content\">\n                <div className = \"separe separe_1\">\n                    <p>\n                        6969 students\n                    </p>\n                    <p>\n                        {length / 60} minutes\n                    </p>\n                </div>\n                <p className = \"course-title\">{title}</p>\n                <div className = \"separe separe_2\">\n                    <p>John Pidar</p>\n                    {!edit ? \n                        (bookmarked ? <BookmarkFilled className = \"icon bookmark_active\" onClick = {handleClick}/> : <BookmarkEmpty className = \"bookmark\" onClick = {handleClick}/>) :\n                        <Edit className = \"icon edit-icon\" />\n                    }\n                </div>\n            </div>\n        </Link>\n    );\n}","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CourseCardCarousel.tsx",["109","110","111","112","113","114"],"import React, { useEffect, useRef, useState } from 'react'\nimport {IconButton} from \"@material-ui/core\";\nimport ArrowRight from '@material-ui/icons/ArrowForwardIos';\nimport ArrowLeft from '@material-ui/icons/ArrowBackIos';\nimport {breakpoints} from \"../utils\";\nimport { cpuUsage } from 'process';\nimport {CourseModel} from \"../interfaces\";\nimport CourseCard from \"./CourseCard\";\nimport {getCoursesByCategory} from \"../api\";\n\nexport interface Props {\n    category: string\n}\n\n\nconst CourseCardCarousel = ({category}: Props) => {\n    const mainContainer = useRef <any> ();\n    const slide = useRef <any> ();\n    const [counter, setCounter] = useState(0);\n    const [view, setView] = useState(4);\n    const [data, setData] = useState <CourseModel[]> ([]);\n\n    const getData = async () => {\n        let courses = await getCoursesByCategory(category);\n        setData(courses);\n    }\n    \n    const handleResize = () => {\n        const w = window.innerWidth;\n        const {mobile, tablet, smallScreen, largeScreen} = breakpoints;\n        let view = 0;\n        if (w <= mobile) {\n            view = 1;\n        }\n        else if (w <= tablet) {\n            view = 2;\n        }\n        else if (w <= smallScreen) {\n            view = 3;\n        }\n        else {\n            view = 4;\n        }\n        setView(view);\n    }\n    \n    useEffect(() => {\n        handleResize();\n        window.addEventListener(\"resize\", handleResize);\n    }, [])\n\n    const left = () => {\n        if (counter === 0)\n            return;\n        setCounter(counter - 1);\n    }\n\n    const right = () => {\n        if (counter == data.length - 1)\n            return;\n        setCounter(counter + 1);\n    }\n    \n    useEffect(() => {\n        getData();\n    }, [])\n\n    let displayData = data;\n    if (view == 1){\n        displayData = displayData.slice(0, 4);\n    }\n    else if (displayData.length % view !== 0){\n        displayData = displayData.slice(0, Math.floor(displayData.length / view) * view)\n    }\n\n\n    return (\n        <section ref = {mainContainer} className = \"card-carousel\">\n            <IconButton disabled = {counter === 0} onClick = {left} className = \"arrow arrow-left\">\n                <ArrowLeft/>\n            </IconButton>\n            <div className=\"window\">\n                <div className=\"content\" style = {{transform: `translateX(${-counter * 100}%)`}}>\n                    {displayData.map((x, index) => (\n                        <div key = {index} className=\"item\">\n                            <CourseCard key = {index} {...x}/>\n                        </div>\n                    ))}\n                </div>\n            </div>\n            <IconButton disabled = {(counter + 1) * view >= displayData.length - 1} onClick = {right} className = \"arrow arrow-right\">\n                <ArrowRight/>\n            </IconButton>\n        </section>\n    );\n}\n\nexport default CourseCardCarousel;","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/utils.ts",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/GrayBackground.tsx",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/api.ts",["115"],"import {AddCourseModel, Category, CourseModel, LessonModel} from \"./interfaces\";\nimport {useEffect} from \"react\";\n\ntype Method = \"GET\" | \"POST\" | \"DELETE\" | \"PUT\";\n\nconst getCoursesByCategory = async (category: string): Promise<CourseModel[]> => {\n    const url = \"/api/courselist/category\";\n    return (await makeNetworkCall(url, [[\"name\", category]], \"GET\", null)) as CourseModel[];\n}\n\nconst getCourses = async (): Promise<CourseModel[]> => {\n    const url = \"/api/courselist\";\n    return (await makeNetworkCall(url, [], \"GET\", null)) as CourseModel[];\n}\n\nconst getCategories = async () :Promise<Category[]> => {\n    const url = \"/api/categories/all\";\n    return (await makeNetworkCall(url, [], \"GET\", null)) as Category[];\n}\n\nconst postCourse = async (data: AddCourseModel) : Promise<CourseModel> => {\n    const url = \"/api/createcourse\";\n    return (await makeNetworkCall(url, [], \"POST\", data) ) as CourseModel;\n}\n\nconst assignCategory = async (courseId: string, categoryId: string): Promise<object> => {\n    const url = \"/api/createcourse/category\"\n    return (await makeNetworkCall(url, [], \"POST\", {\n        courseId: courseId,\n        categoryId: categoryId\n    })) \n}\n\nconst addLesson = async (courseId: string, title: string, videoSrc: string): Promise<LessonModel> => {\n    const url = \"api/createcourse/lesson\"\n    return (await makeNetworkCall(url, [], \"POST\", {\n        courseId: courseId,\n        title: title,\n        videoSrc: videoSrc\n    })) as LessonModel;\n}\n\nconst updateLesson = async (lessonId: string, title: string): Promise<LessonModel> => {\n    const url = \"api/createcourse/lesson\"\n    return (await makeNetworkCall(url, [], \"PUT\", {\n        lessonId: lessonId,\n        title: title\n    })) as LessonModel;\n}\n\nconst getLessons = async (courseId: string): Promise<LessonModel[]> => {\n    const url = \"api/coursedetails/lessons\"\n    return (await makeNetworkCall(url, [[\"id\", courseId]], \"GET\", null)) as LessonModel[];\n}\n\nconst removeLesson = async (lessonId: string): Promise <object> => {\n    const url = \"/api/CreateCourse/lesson\";\n    return (await makeNetworkCall(url, [[\"lessonId\", lessonId]], \"DELETE\", null));\n}\n\nconst makeNetworkCall = async (url: string, params: [string, string][] = [], method: Method = \"GET\", data: any | null = null): Promise<object> => {\n    const link = `${url}?${params.map(it => it[0] + '=' + it[1]).join(\",\")}`\n    const options = {\n        method: method,\n        headers: { 'Content-Type': 'application/json' },\n        body: data === null ? undefined : JSON.stringify(data)\n    }\n    const response = await fetch(link, options);\n    const raw = await response.text();\n    if (response.status >= 400) {\n        const json = JSON.parse(raw);\n        throw new Error(json.title)\n    }\n    if (raw === \"\") return {};\n    else return JSON.parse(raw);\n}\n\n\n\nexport {getCategories, postCourse, assignCategory, addLesson, getLessons, removeLesson, getCoursesByCategory, updateLesson, getCourses};","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/AppSnackBar.tsx",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/FileUploader.ts",["116"],"import AWS from \"aws-sdk\";\n\nAWS.config.update({\n    accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY,\n    secretAccessKey: process.env.REACT_APP_AWS_SECRET_KEY\n})\n\nconst bucketName = \"cybergh\";\n\nconst bucket = new AWS.S3({\n    params: {Bucket: bucketName},\n    region: \"us-east-1\"\n})\n\nconst uploadFile = async (file, progressCallback) => {\n    const params = {\n        ACL: 'public-read',\n        Key: file.name,\n        ContentType: file.type,\n        Body: file,\n        Bucket: bucketName\n    }\n    let ans = await bucket.putObject(params)\n        .on('httpUploadProgress', (evt) => {\n            // console.log(evt.loaded / evt.total)\n            progressCallback(evt.loaded / evt.total * 100)\n        })\n        .promise()\n\n    return `https://${bucketName}.s3.amazonaws.com/${file.name}`;\n\n}\n\nexport {bucket, uploadFile};","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/HomeView.tsx",["117","118","119"],"import React from 'react'\nimport CourseCard from \"../components/CourseCard\";\nimport CourseSlider from '../components/CourseSlider';\nimport CourseCardCarousel from \"../components/CourseCardCarousel\"\nimport {course1, course2, courseSliderData} from \"../sampleData\";\n\nexport interface Props {\n    [key: string]: any\n}\n\nconst Home = (props: Props) => {\n    \n    return (\n        <section className=\"home\">\n            <CourseSlider data = {courseSliderData} />\n            <section className=\"container\">\n                <div className=\"course-list\">\n                    <p className=\"title\">\n                        Featured On Fakeshare\n                    </p>\n                    <CourseCardCarousel category = \"recommended\"/>\n                </div>\n            </section>\n            <section className=\"container\">\n                <div className=\"course-list\">\n                    <p className=\"title\">\n                        Trending Now\n                    </p>\n                    <CourseCardCarousel category = \"recommended\"/>\n                </div>\n            </section>\n        </section>\n    );\n}\n\nexport default Home;","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/AddLessonsView.tsx",["120"],"import React, {useRef, useState, useEffect} from 'react'\nimport GrayBackground from \"../components/GrayBackground\";\nimport {LocalVideoUploaderElement, RemoteVideoUploaderElement} from \"../components/VideoUploaderElement\";\nimport {getLessons} from \"../api\";\n\nexport interface Props {\n    [key: string]: any\n}\n\nconst AddLessonsView = (props: Props) => {\n    const id = props.match.params.id;\n    const inputRef = useRef <HTMLInputElement | null>  (null);\n    const [lessons, setLessons] = useState <any[]> ([]);\n    \n    const getData = async () => {\n        let lessons = await getLessons(id);\n        lessons = lessons.map (x => ({...x, type: \"remote\"}))\n        setLessons(lessons);\n    }\n    \n    const handleUpload = () => {\n        inputRef.current?.click();\n    }\n    \n    const handleChange = () => {\n        let input = inputRef.current as HTMLInputElement;\n        if (input.files?.length && input.files?.length > 0){\n            let file = input.files[0];\n            setLessons([...lessons, {type: \"local\", file}]);\n        }\n    }\n    \n    useEffect(() => {\n        getData()\n    }, [])\n    \n    return (\n        <>\n            <GrayBackground/>\n            <section className=\"add-lessons\">\n                <p className=\"title\">Video Lessons</p>\n                <p className=\"description\">\n                    Skillshare classes average 20-60 minutes total running time, divided into short video lessons of 2-5 minutes each.\n                    To publish your class, the combined length of all your videos must total at least 10 minutes. <br/> <br/>\n                    Teachers may upload a maximum of 1 class per week.\n                </p>\n                <hr/>\n                <div className = \"uploader\">\n                    <div className = \"videos\">\n                        {lessons.length === 0 ?\n                            <p className=\"empty\">\n                                There are no videos here, yet.\n                            </p>\n                            :\n                            lessons.map((x, i) => x.type === \"local\" ? \n                                <LocalVideoUploaderElement key = {x.file.name} updateLessons = {getData} rawVideo={x.file} courseId={id}/> :\n                                <RemoteVideoUploaderElement key = {x.id} courseId={id} updateLessons={getData} {...x}/>\n                            )\n                        }\n                    </div>\n                    <hr/>\n                    <div>\n                        <button type=\"button\" className=\"upload\" onClick={handleUpload}>Upload Video</button>\n                    </div>\n                </div>\n                <input multiple={false} onChange={handleChange} type = \"file\" ref = {inputRef}  accept = \"video/*\"/>\n            </section>\n        </>\n    );\n}\n\nexport default AddLessonsView;","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/AddCourseView.tsx",["121","122","123","124","125","126","127","128","129","130"],"import React, {useContext, useEffect, useRef, useState} from 'react'\nimport GrayBackground from \"../components/GrayBackground\";\nimport S3FileUpload from \"react-s3\";\nimport {AddCourseModel, Category} from \"../interfaces\";\nimport {assignCategory, getCategories, postCourse} from \"../api\";\nimport {\n    Button, Checkbox,\n    CircularProgress, Dialog, DialogActions,\n    DialogContent,\n    DialogTitle,\n    LinearProgress,\n    ListItemText,\n    MenuItem,\n    Snackbar\n} from '@material-ui/core';\nimport {Alert} from \"@material-ui/lab\";\nimport {cacheImages, generateRandomString, withFallback} from \"../utils\";\nimport {SnackbarContext} from \"../components/AppSnackBar\";\nimport {bucket, uploadFile} from \"../components/FileUploader\";\nimport {stringify} from \"querystring\";\nimport CategoryCheckBox from \"../components/CategoryCheckBox\";\n\n\nexport interface Props {\n    [key: string]: any\n}\n\ninterface CategoryCheckModel {\n    [key: string]: boolean | undefined\n}\n\nconst userLevels = [\"Beginner\", \"Intermediate\", \"Expert\"];\n\nconst defaultFields = {\n    title: \"\",\n    previewImageUrl: \"\",\n    description: \"\",\n    length: 120,\n    userLevel: userLevels[0]\n}\n\nconst AddCourse =  (props: Props) => {\n    const {setData: setSnackbar} = useContext(SnackbarContext);\n    const [loading, setLoading] = useState(false);\n    const [loadingProgress, setLoadingProgress] = useState(0);\n    const [formLoading, setFormLoading] = useState(false);\n    const [fields, setFields] = useState(defaultFields);\n    const [dialogState, setDialogState] = useState(false);\n    const [categories, setCategories] = useState<Category[]>([]);\n    const [categoryChecked, setCategoryChecked] = useState <CategoryCheckModel> ({});\n    let inputRef = useRef<HTMLInputElement | null>(null);\n    \n    console.log(categoryChecked);\n    \n    const handleCategoryCheck = (id) => (e) => {\n        console.log(\"clicked n pula mea\")\n        setCategoryChecked({\n            ...categoryChecked,\n            [id]: !categoryChecked[id]\n        })\n    }\n    \n    const setField = (field: string) => (e) => {\n        const newFields = {\n            ...fields,\n            [field]: e.target.value\n        }\n        setFields(newFields);\n    }\n    \n    const addCourse = async (e) => {\n        e.preventDefault();\n        setFormLoading(true);\n        const model: AddCourseModel = {\n            ...fields\n        }\n        await withFallback(setSnackbar, async () => {\n            const course = await postCourse(model);\n            const ids = categories.filter(it => categoryChecked[it.id]).map(it => it.id);\n            let tasks = ids.map(it => (assignCategory(course.id, it)));\n            await Promise.all(tasks);\n            setSnackbar({message: \"Course added!\", type: \"success\"})\n            props.history.push(`/add-lessons/${course.id}`)\n        })\n    }\n    \n    const getData = async () => {\n        let categories = await getCategories();\n        setCategories(categories);\n        setFields(fields);\n        console.log(categories);\n    }\n    \n    useEffect(() => {\n        getData();\n    }, []);\n    \n    const handleClick = () => {\n        inputRef.current?.click();\n    }\n    \n    const handleUpload = async () => {\n        let input = inputRef.current as HTMLInputElement;\n        if (input.files?.length && input.files?.length > 0){\n            setLoading(true);\n            const file = input.files[0];\n            let blob = file.slice(0, file.size, 'image/*');\n            let extension = file.name.split(\".\").slice(-1)[0];\n            let randomString = generateRandomString();\n            let renamedFile = new File([blob], `${randomString}.${extension}`, {type: 'image/' + extension});\n            // let response = await S3FileUpload.uploadFile(renamedFile, config);\n            let location = await uploadFile(renamedFile, (progress) => {\n                setLoadingProgress(progress);\n            })\n            await cacheImages([location]);\n            setLoading(false);\n            setFields({\n                ...fields,\n                previewImageUrl: location\n            })\n        }\n    }\n    \n    return (\n            <>\n                <GrayBackground/>\n                <section className=\"course-overview\">\n                    <p className=\"title\">Course Overview</p>\n                    <p className=\"description\">Add class details to help students discover and learn about your class.</p>\n                    <hr/>\n    \n                    <form className=\"form\" onSubmit={addCourse}>\n                        <div className=\"element\">\n                            <p className=\"label\">Course Title</p>\n                            <input value={fields.title} required type=\"text\" placeholder=\"Write a course title\" onChange={setField(\"title\")}/>\n                        </div>\n    \n                        <div className=\"element\">\n                            <p className=\"label\">Description</p>\n                            <textarea value={fields.description} required rows={6} placeholder=\"Write a course description\" onChange={setField(\"description\")}/>\n                        </div>\n                        \n                        <div className=\"image-uploader\">\n                            {loading && <LinearProgress className=\"loader\" variant=\"determinate\" value={loadingProgress} />}\n                            {fields.previewImageUrl !== null && <img src={fields.previewImageUrl! }/>}\n                            <input onChange={handleUpload} ref = {inputRef} type = \"file\" accept = \"image/*\" multiple = {false}/>\n                            {!loading && <button type=\"button\" onClick={handleClick} className={fields.previewImageUrl ? \"absolute\" : \"\"}>Upload Image</button>}\n                        </div>\n                        \n                        <div className=\"row\">\n                            <div className=\"element first\">\n                                <p className=\"label\">Category</p>\n                                <input placeholder=\"Click to choose course categories\" readOnly={true} type = \"text\" value={categories.filter(x => categoryChecked[x.id]).map(x => x.name).join(', ')} onClick={() => setDialogState(true)}/>\n                            </div>\n                            <div className=\"element\">\n                                <p className=\"label\">User Level</p>\n                                <select value={fields.userLevel} onChange={setField(\"userLevel\")}>\n                                    {userLevels.map((it) => (\n                                        <option key={it} value={it}>{it}</option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                        {formLoading ? \n                            <div className=\"circular-progress\">\n                                <CircularProgress/>\n                            </div> : \n                            <input type=\"submit\" className=\"create\" value=\"Create\"/>\n                        }\n                    </form>\n                </section>\n                <Dialog scroll = \"paper\" open={dialogState} onClose={() => setDialogState(false)}>\n                    <DialogTitle>Select Categories</DialogTitle>\n                    <DialogContent style = {{width: \"400px\"}}>\n                        {categories.map(x => (\n                            <CategoryCheckBox onClick = {handleCategoryCheck(x.id)} key = {x.id} checked = {!!categoryChecked[x.id]} name = {x.name}/>\n                        ))}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => setDialogState(false)} color=\"primary\">\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        \n    );\n}\n\nexport default AddCourse;","/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/VideoUploaderElement.tsx",["131","132","133","134"],"import React, {useContext, useEffect, useState} from 'react'\nimport {generateRandomString, withFallback} from \"../utils\";\nimport {uploadFile} from \"./FileUploader\";\nimport {LinearProgress} from \"@material-ui/core\";\nimport {SnackbarContext} from \"./AppSnackBar\";\nimport {addLesson, removeLesson, updateLesson} from \"../api\";\nimport {CheckBox} from \"@material-ui/icons\";\n\nexport interface LocalProps {\n    rawVideo: File,\n    courseId: string,\n    updateLessons: () => void,\n}\n\nconst LocalVideoUploaderElement = ({rawVideo, courseId, updateLessons}: LocalProps) => {\n    const {setData: setSnackbar} = useContext(SnackbarContext);\n    const [loading, setLoading] = useState(false);\n    const [loadingProgress, setLoadingProgress] = useState(0);\n    const [location, setLocation] = useState(\"\");\n    const [lessonId, setLessonId] = useState <null | string> (null)\n\n    const handleRemove = async () => {\n        await removeLesson(lessonId!);\n        await updateLessons();\n    }\n\n    const uploadVideo = async () => {\n        setLoading(true)\n        const name = generateRandomString();\n        let blob = rawVideo!.slice(0, rawVideo!.size, 'video/*');\n        let extension = rawVideo!.name.split(\".\").slice(-1)[0];\n        let randomString = generateRandomString();\n        let renamedFile = new File([blob], `${randomString}.${extension}`, {type: 'video/' + extension});\n        let location = await uploadFile(renamedFile, (progress) => {\n            setLoadingProgress(progress);\n        })\n        let {id} = await addLesson(courseId, rawVideo!.name.split(\".\")[0], location);\n        setLessonId(id);\n        setLocation(location);\n        setSnackbar({message: \"Video uploaded successfully!\", type: \"success\"});\n        setLoading(false);\n        updateLessons();\n    }\n\n    useEffect(() => {\n        uploadVideo();\n    }, [])\n\n    return (\n        <section className = \"video-element loading\">\n            <div className=\"video\">\n                <p className=\"percentage\">\n                    {loadingProgress.toFixed(1)}%\n                </p>\n                <p className=\"status\">\n                    {loading && \"Uploading ...\"}\n                </p>\n                <LinearProgress variant=\"determinate\" className=\"progress\" value={loadingProgress}/>\n            </div> \n            <div className = \"info\">\n                <p className= \"title\">\n                    {rawVideo.name.split(\".\")[0]}\n                </p>\n                <p className=\"subtitle\">\n                    Uploading: {rawVideo.name}\n                </p>\n            </div>\n        </section>\n    );\n}\n\nexport interface RemoteProps {\n    title: string,\n    videoSrc: string,\n    id: string,\n    courseId: string,\n    updateLessons: () => void,\n}\n\nconst RemoteVideoUploaderElement = ({courseId, updateLessons, title, videoSrc, id}: RemoteProps) => {\n    const {setData: setSnackbar} = useContext(SnackbarContext);\n    const [value, setValue] = useState(title);\n    const [tempValue, setTempValue] = useState(value);\n    const [inputState, setInputState] = useState(false);\n    \n    const handleClick = async () => {\n        if (inputState) {\n            await withFallback(setSnackbar, async () => {\n                await updateLesson(id, tempValue);\n                setValue(tempValue);\n                setSnackbar({message: \"Lesson title updated successfully\", type: \"success\"});\n            });\n        }\n        setInputState(!inputState);\n    }\n\n    const handleRemove = async () => {\n        await withFallback(setSnackbar, async () => {\n            await removeLesson(id);\n            await updateLessons();\n            setSnackbar({message: \"Video Removed Successfully\", type: \"success\"});\n        });\n    }\n\n    return (\n        <section className = \"video-element\">\n            <div className=\"preview\">\n                <video src = {videoSrc} />\n            </div>\n            <div className = \"info\">\n                {!inputState ? \n                    <p onClick={handleClick} className=\"title\">\n                        {value.split(\".\")[0]}\n                    </p> :\n                    <div className=\"info-input\">\n                        <input value = {tempValue} onChange={e => {\n                            setTempValue(e.target.value)\n                        }} />\n                        <CheckBox className=\"checkbox\" onClick={handleClick}/>\n                    </div>\n                }\n                <button className={\"remove\"} onClick={handleRemove}>Remove Video</button>\n            </div>\n        </section>\n    );\n}\n\nexport {LocalVideoUploaderElement, RemoteVideoUploaderElement}",["135","136"],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/components/CategoryCheckBox.tsx",[],"/Users/soltan/RiderProjects/ELearn-Copy/ELearn/ClientApp/src/pages/UserCoursesView.tsx",["137"],"import React, {useEffect, useState} from 'react'\nimport {CourseModel} from \"../interfaces\";\nimport {getCourses} from \"../api\";\nimport {Link} from \"react-router-dom\";\nimport CourseCard from \"../components/CourseCard\";\n\nexport interface Props {\n    [key: string]: any\n}\n\nconst UserCoursesView = (props: Props) => {\n    const [data, setData] = useState <CourseModel[]> ([]);\n\n    const getData = async () => {\n        let courses = await getCourses();\n        setData(courses);\n    }\n    \n    useEffect(() => {\n        getData();\n    }, [])\n    \n    return (\n        <>\n            <section className = \"user-classes\">\n                <p className=\"title\">My Classes</p>\n                <div className=\"courses\">\n                    {data.map((x, index) => (\n                        <div key = {index} className=\"element\">\n                            <CourseCard {...x} edit/>\n                        </div>\n                    ))}\n                </div>\n            </section>\n        </>\n    );\n}\n\nexport default UserCoursesView;",{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":2,"column":30,"nodeType":"144","messageId":"145","endLine":2,"endColumn":34},{"ruleId":"146","severity":1,"message":"147","line":10,"column":1,"nodeType":"148","endLine":40,"endColumn":2},{"ruleId":"142","severity":1,"message":"149","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":20},{"ruleId":"142","severity":1,"message":"150","line":3,"column":10,"nodeType":"144","messageId":"145","endLine":3,"endColumn":29},{"ruleId":"142","severity":1,"message":"151","line":8,"column":10,"nodeType":"144","messageId":"145","endLine":8,"endColumn":29},{"ruleId":"142","severity":1,"message":"152","line":3,"column":9,"nodeType":"144","messageId":"145","endLine":3,"endColumn":14},{"ruleId":"146","severity":1,"message":"147","line":11,"column":1,"nodeType":"148","endLine":43,"endColumn":2},{"ruleId":"142","severity":1,"message":"153","line":6,"column":10,"nodeType":"144","messageId":"145","endLine":6,"endColumn":18},{"ruleId":"142","severity":1,"message":"154","line":18,"column":11,"nodeType":"144","messageId":"145","endLine":18,"endColumn":16},{"ruleId":"142","severity":1,"message":"155","line":30,"column":45,"nodeType":"144","messageId":"145","endLine":30,"endColumn":56},{"ruleId":"156","severity":1,"message":"157","line":59,"column":21,"nodeType":"158","messageId":"159","endLine":59,"endColumn":23},{"ruleId":"160","severity":1,"message":"161","line":66,"column":8,"nodeType":"162","endLine":66,"endColumn":10,"suggestions":"163"},{"ruleId":"156","severity":1,"message":"157","line":69,"column":14,"nodeType":"158","messageId":"159","endLine":69,"endColumn":16},{"ruleId":"142","severity":1,"message":"164","line":2,"column":9,"nodeType":"144","messageId":"145","endLine":2,"endColumn":18},{"ruleId":"142","severity":1,"message":"165","line":23,"column":9,"nodeType":"144","messageId":"145","endLine":23,"endColumn":12},{"ruleId":"142","severity":1,"message":"166","line":2,"column":8,"nodeType":"144","messageId":"145","endLine":2,"endColumn":18},{"ruleId":"142","severity":1,"message":"167","line":5,"column":9,"nodeType":"144","messageId":"145","endLine":5,"endColumn":16},{"ruleId":"142","severity":1,"message":"168","line":5,"column":18,"nodeType":"144","messageId":"145","endLine":5,"endColumn":25},{"ruleId":"160","severity":1,"message":"161","line":36,"column":8,"nodeType":"162","endLine":36,"endColumn":10,"suggestions":"169"},{"ruleId":"142","severity":1,"message":"170","line":3,"column":8,"nodeType":"144","messageId":"145","endLine":3,"endColumn":20},{"ruleId":"142","severity":1,"message":"171","line":7,"column":13,"nodeType":"144","messageId":"145","endLine":7,"endColumn":21},{"ruleId":"142","severity":1,"message":"172","line":12,"column":5,"nodeType":"144","messageId":"145","endLine":12,"endColumn":17},{"ruleId":"142","severity":1,"message":"173","line":13,"column":5,"nodeType":"144","messageId":"145","endLine":13,"endColumn":13},{"ruleId":"142","severity":1,"message":"174","line":14,"column":5,"nodeType":"144","messageId":"145","endLine":14,"endColumn":13},{"ruleId":"142","severity":1,"message":"175","line":16,"column":9,"nodeType":"144","messageId":"145","endLine":16,"endColumn":14},{"ruleId":"142","severity":1,"message":"176","line":19,"column":9,"nodeType":"144","messageId":"145","endLine":19,"endColumn":15},{"ruleId":"142","severity":1,"message":"177","line":20,"column":9,"nodeType":"144","messageId":"145","endLine":20,"endColumn":18},{"ruleId":"160","severity":1,"message":"161","line":99,"column":8,"nodeType":"162","endLine":99,"endColumn":10,"suggestions":"178"},{"ruleId":"179","severity":1,"message":"180","line":148,"column":65,"nodeType":"181","endLine":148,"endColumn":102},{"ruleId":"142","severity":1,"message":"182","line":19,"column":12,"nodeType":"144","messageId":"145","endLine":19,"endColumn":20},{"ruleId":"142","severity":1,"message":"183","line":22,"column":11,"nodeType":"144","messageId":"145","endLine":22,"endColumn":23},{"ruleId":"142","severity":1,"message":"184","line":29,"column":15,"nodeType":"144","messageId":"145","endLine":29,"endColumn":19},{"ruleId":"160","severity":1,"message":"185","line":47,"column":8,"nodeType":"162","endLine":47,"endColumn":10,"suggestions":"186"},{"ruleId":"138","replacedBy":"187"},{"ruleId":"140","replacedBy":"188"},{"ruleId":"142","severity":1,"message":"189","line":4,"column":9,"nodeType":"144","messageId":"145","endLine":4,"endColumn":13},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"@typescript-eslint/no-unused-vars","'Bell' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'AnyARecord' is defined but never used.","'RouteComponentProps' is defined but never used.","'CourseSliderElement' is defined but never used.","'Paper' is defined but never used.","'cpuUsage' is defined but never used.","'slide' is assigned a value but never used.","'largeScreen' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["192"],"'useEffect' is defined but never used.","'ans' is assigned a value but never used.","'CourseCard' is defined but never used.","'course1' is defined but never used.","'course2' is defined but never used.",["193"],"'S3FileUpload' is defined but never used.","'Checkbox' is defined but never used.","'ListItemText' is defined but never used.","'MenuItem' is defined but never used.","'Snackbar' is defined but never used.","'Alert' is defined but never used.","'bucket' is defined but never used.","'stringify' is defined but never used.",["194"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'location' is assigned a value but never used.","'handleRemove' is assigned a value but never used.","'name' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'uploadVideo'. Either include it or remove the dependency array.",["195"],["190"],["191"],"'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"196","fix":"198"},{"desc":"196","fix":"199"},{"desc":"200","fix":"201"},"Update the dependencies array to be: [getData]",{"range":"202","text":"203"},{"range":"204","text":"203"},{"range":"205","text":"203"},"Update the dependencies array to be: [uploadVideo]",{"range":"206","text":"207"},[1726,1728],"[getData]",[1124,1126],[3109,3111],[1829,1831],"[uploadVideo]"]